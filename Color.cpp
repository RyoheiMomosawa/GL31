/******************************************************************************
**	タイトル  :
**	ファイル名: Color.cpp
**	作成者    : AT-13B-284 出席番号 14 木村 祥貴
**	作成日    : 2016/7/8
**	修正日	　: //
********************************************************************************/

/******************************************************************************
**	インクルードファイル
******************************************************************************/
#include "Color.h"


/******************************************************************************
**	静的メンバ変数
******************************************************************************/


/******************************************************************************
**	関数名:
**		関数の概要
**	引数  : void
**	戻り値: void
**	説明  : コンストラクタ
******************************************************************************/
Color::Color()
{
	r = g = b = a = 0.0f;

}


/******************************************************************************
**	関数名:
**		関数の概要
**	引数  : float r, float g, float b, float a
**	戻り値: void
**	説明  : コンストラクタ
******************************************************************************/
Color::Color( float r, float g, float b, float a )
{
	this->r = r;
	this->g = g;
	this->b = b;
	this->a = a;

}


/******************************************************************************
**	関数名:
**		関数の概要
**	引数  : int r, int g, int b, int a
**	戻り値: void
**	説明  : コンストラクタ
******************************************************************************/
Color::Color( int r, int g, int b, int a )
{
	this->r = ( float )r / 255.0f;
	this->g = ( float )g / 255.0f;
	this->b = ( float )b / 255.0f;
	this->a = ( float )a / 255.0f;

}


/******************************************************************************
**	関数名: ~
**		関数の概要
**	引数  : void
**	戻り値: void
**	説明  : デストラクタ
******************************************************************************/
Color::~Color()
{
}


/******************************************************************************
**	関数名: operator+=
**	関数の概要
**	引数  : const Color &
**	戻り値: Color &
**	説明  :
******************************************************************************/
Color & Color::operator+=( const Color &col )
{
	this->r += col.r;
	this->g += col.g;
	this->b += col.b;
	this->a += col.a;

	return *this;

}


/******************************************************************************
**	関数名: operator-=
**	関数の概要
**	引数  : const Color &
**	戻り値: Color &
**	説明  :
******************************************************************************/
Color & Color::operator-=( const Color &col )
{
	this->r -= col.r;
	this->g -= col.g;
	this->b -= col.b;
	this->a -= col.a;

	return *this;

}


/******************************************************************************
**	関数名: operator*=
**	関数の概要
**	引数  : const float x
**	戻り値: Color &
**	説明  :
******************************************************************************/
Color & Color::operator*=( const float x )
{
	this->r *= x;
	this->g *= x;
	this->b *= x;
	this->a *= x;

	return *this;

}


/******************************************************************************
**	関数名: operator/=
**	関数の概要
**	引数  : const float x
**	戻り値: Color &
**	説明  :
******************************************************************************/
Color & Color::operator/=( const float x )
{
	this->r /= x;
	this->g /= x;
	this->b /= x;
	this->a /= x;

	return *this;

}


/******************************************************************************
**	関数名: operator+
**	関数の概要
**	引数  : const
**	戻り値: Color
**	説明  :
******************************************************************************/
Color Color::operator+() const
{
	Color col;
	col.r = this->r;
	col.g = this->g;
	col.b = this->b;
	col.a = this->a;

	return col;

}


/******************************************************************************
**	関数名: operator-
**	関数の概要
**	引数  : onst
**	戻り値: Color
**	説明  :
******************************************************************************/
Color Color::operator-() const
{
	Color col;
	col.r = -this->r;
	col.g = -this->g;
	col.b = -this->b;
	col.a = -this->a;

	return col;

}


/******************************************************************************
**	関数名: operator+
**	関数の概要
**	引数  : const Color &col
**	戻り値: Color
**	説明  :
******************************************************************************/
Color Color::operator+( const Color &col ) const
{
	Color c;
	c.r = this->r + col.r;
	c.g = this->g + col.g;
	c.b = this->b + col.b;
	c.a = this->a + col.a;

	return c;

}


/******************************************************************************
**	関数名: operator-
**	関数の概要
**	引数  : const Color &col
**	戻り値: Color
**	説明  :
******************************************************************************/
Color Color::operator-( const Color &col ) const
{
	Color c;
	c.r = this->r - col.r;
	c.g = this->g - col.g;
	c.b = this->b - col.b;
	c.a = this->a - col.a;

	return c;

}


/******************************************************************************
**	関数名: operator*
**	関数の概要
**	引数  : const float x 
**	戻り値: Color
**	説明  :
******************************************************************************/
Color Color::operator*( const float x ) const
{
	Color c;
	c.r = this->r * x;
	c.g = this->g * x;
	c.b = this->b * x;
	c.a = this->a * x;

	return c;

}


/******************************************************************************
**	関数名: operator/
**	関数の概要
**	引数  : const float x
**	戻り値: Color
**	説明  :
******************************************************************************/
Color Color::operator/( const float x ) const
{
	Color c;
	c.r = this->r / x;
	c.g = this->g / x;
	c.b = this->b / x;
	c.a = this->a / x;

	return c;

}


/******************************************************************************
**	関数名: operator=
**	関数の概要
**	引数  : const unsigned long l
**	戻り値: Color &
**	説明  :
******************************************************************************/
Color & Color::operator=( const unsigned long l )
{
	this->r = ( float )( l & 0x000000ff ) / 255.0f;
	this->g = ( float )( ( l & 0x0000ff00 ) >> 8 ) / 255.0f;
	this->b = ( float )( ( l & 0x00ff0000 ) >> 16 ) / 255.0f;

	return *this;

}
