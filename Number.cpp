/******************************************************************************
**	タイトル  :
**	ファイル名: Number.cpp
**	作成者    : AT-13B-284 出席番号 14 木村 祥貴
**	作成日    : 2016/6/21
**	修正日	　: //
********************************************************************************/

/******************************************************************************
**	インクルードファイル
******************************************************************************/

// 自身ヘッダ
#include "Number.h"

#ifdef _DEBUG
#include "Manager.h"

#endif // _DEBUG


/******************************************************************************
**	静的メンバ変数
******************************************************************************/


/******************************************************************************
**	関数名:
**		関数の概要
**	引数  : void
**	戻り値: void
**	説明  : コンストラクタ
******************************************************************************/
Number::Number()
{
	m_Color = Color( 0.0f, 0.0f, 0.0f, 0.0f );
	m_Pos = m_Rot = Vector3( 0.0f, 0.0f, 0.0f );
	m_Angle = 0.0f;
	m_Length = 0.0f;
	m_Width = m_Height = 0.0f;
	m_nNumber = 0;

}


/******************************************************************************
**	関数名:
**		関数の概要
**	引数  : void
**	戻り値: void
**	説明  : デストラクタ
******************************************************************************/
Number::~Number()
{
}


/******************************************************************************
**	関数名: 初期化処理 Init
**		関数の概要
**	引数  :
**	戻り値: HRESULT
**	説明  : 初期化処理
******************************************************************************/
HRESULT Number::Init()
{
	m_Color = Color( 0.0f, 0.0f, 0.0f, 0.0f );
	m_Pos = m_Rot = Vector3( 0.0f, 0.0f, 0.0f );
	m_Angle = 0.0f;
	m_Length = 0.0f;
	m_Width = m_Height = 0.0f;
	m_nNumber = 0;

	return S_OK;

}


/******************************************************************************
**	関数名: 終了処理 Uninit
**		関数の概要
**	引数  : void
**	戻り値: int
**	説明  :
******************************************************************************/
int Number::Uninit()
{

	return 0;

}


/******************************************************************************
**	関数名: 更新処理 Update
**		関数の概要
**	引数  : void
**	戻り値: void
**	説明  :
******************************************************************************/
void Number::Update()
{
#ifdef _DEBUG
	// 数値の加算
	if( Manager::GetKeyboard()->GetTrigger( DIK_ADD ) )
	{
		m_nNumber++;

	}
	// 数値の減算
	else if( Manager::GetKeyboard()->GetTrigger( DIK_SUBTRACT ) )
	{
		m_nNumber--;

	}

#endif // _DEBUG

}


/******************************************************************************
**	関数名: 描画処理 Draw
**		関数の概要
**	引数  : void
**	戻り値: void
**	説明  : 画像設定はこの関数を呼び出す前に設定
******************************************************************************/
void Number::Draw()
{
	// テクスチャ画像、大きさの計算
	float textureUV = ( float )m_nNumber * 0.1f;
	float width = m_Width * 0.5f;
	float height = m_Height * 0.5f;


	// 描画開始
	glBegin( GL_TRIANGLE_STRIP );

	glColor4f( m_Color.r, m_Color.g, m_Color.b, m_Color.a );
	glTexCoord2f( textureUV, 0.0f );
	glVertex2d( m_Pos.x - width, m_Pos.y + height );

	glTexCoord2f( textureUV + 0.1f, 0.0f );
	glVertex2d( m_Pos.x + width, m_Pos.y + height );

	glTexCoord2f( textureUV, 1.0f );
	glVertex2d( m_Pos.x - width, m_Pos.y - height );

	glTexCoord2f( textureUV + 0.1f, 1.0f );
	glVertex2d( m_Pos.x + width, m_Pos.y - height );

	glEnd();

}


/******************************************************************************
**	関数名: SetNumber
**	関数の概要
**	引数  : int no
**	戻り値: void
**	説明  :
******************************************************************************/
void Number::SetNumber( int no )
{
	m_nNumber = no;

}


/******************************************************************************
**	関数名: SetScale
**	関数の概要
**	引数  : float width, float height
**	戻り値: void
**	説明  :
******************************************************************************/
void Number::SetSize( float width, float height )
{
	m_Width = width;
	m_Height = height;

}


/******************************************************************************
**	関数名: SetPos
**	関数の概要
**	引数  : D3DXVECTOR3 * pos
**	戻り値: void
**	説明  :
******************************************************************************/
void Number::SetPos( Vector3 *pos )
{
	m_Pos = *pos;
	m_Pos.z = 0.0f;

}


/******************************************************************************
**	関数名: SetPos
**	関数の概要
**	引数  : float x, float y
**	戻り値: void
**	説明  :
******************************************************************************/
void Number::SetPos( float x, float y )
{
	m_Pos.x = x;
	m_Pos.y = y;
	m_Pos.z = 0.0f;

}


/******************************************************************************
**	関数名: SetRot
**	関数の概要
**	引数  : float z
**	戻り値: void
**	説明  :
******************************************************************************/
void Number::SetRot( float z )
{
	m_Rot.z = z;

}


/******************************************************************************
**	関数名: SetColor
**	関数の概要
**	引数  : Color *col
**	戻り値: void
**	説明  :
******************************************************************************/
void Number::SetColor( Color *col )
{
	m_Color = *col;

}
